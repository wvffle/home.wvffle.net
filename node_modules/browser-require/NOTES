Development - hot async loading; push loading; exploit browser cacheing; timestamping assets; lazy loading of js code
Production - hybrid static & hot async loading
npm modules + local modules
node.registerExtension to intercept *.js modules and write stuff inline
To respond hot async load, find that require's dependencies and send them all back.
If 2 requires share a dependency, then don't send that same dependency down twice.
Handle relative modules, too.
Handle relative modules relative to npm modules correctly.
Browser requests timestamped files
If we use Google Closure, then we need to run Google Closure on the ENTIRE compiled js file even if that js is loaded in pieces asynchronously in the environment.
Cache js compilation results.
Easily switch btwn production, development, and other envs.

Filter middleware (gsubs, YUI compressor, Google Closure compressor)

Browser uses "require"
"require" sends request to server, perhaps at "/prefix/#{filename}?v=#{timestamp}"
"require" needs to be async, but it has sync semantics
Perhaps server sends any "public" js files using "require" with an array of other files to download + the string of js to eval once those files are downloaded.

Walk down paths (setup tree and watch list) to resolve paths.
Watch is optional, since hot async loading would require socket.io or another comet lib. We want the base of this lib to be lightweight.

The name of the module needs to be normalized. Lookup of module needs to normalize input to lookup cached modules.

Do it as a require.registerExtension
//    require.registerExtension('.js', function (content) {
//      content.match(/require\(['"]([^'"]+)['"]\)/, function (match, $1) {
//        if (!cache[$1] || cache[$1].mtime < mtime) {
//          cache[$1] = {
//              mtime: mtime || +new Date
//            , source: source
//          };
//        }
//        return match;
//      });
//      return content;
//    });

ALTERNATIVES
requirejs
https://github.com/substack/node-browserify
https://github.com/sstephenson/stitch
https://github.com/mozilla/dryice
